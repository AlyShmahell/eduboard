/**
 * Copyright 2017 Aly Shmahell
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http:#www.apache.org/licenses/LICENSE-2.0 . Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 * 
 * Author: Aly Shmahell
 */

import java.util.*;
import java.io.*;

public class zeroSumBot {
  
  public static void DoTurn(PlanetWars pw) {
  	  int numFleets = 4;
    
	/**
	 * Initial Parameters
	 */
    Planet base = null;
    Planet target = null;
    Random rand = new Random();
    int baseNumShips = 0;
    boolean AttackMode = false;
    
    /**
     * Optimized Parameters
     */
    int neatShipNumMin = 2;
    int neatShipNumMax = 30;
    int neatPlanetNumMin = 1;
    int neatPlanetNumMax = 7;
    int neatProductionMin = 2;
    int neatProductionMax = 20;
    int numFleet = 3;
    int myCounterMax = 3;
    int enemyCounterMax = 3;
    int neutralCounterMax = 3;
    int myShipsMax = 30;
    int myShipsMin = 20;
    int enemyShipsMax = 30;
    int enemyShipsMin = 20;
    int neutralShipsMax = 30;
    int neutralShipsMin = 20;
    int myGrowthRateMax = 30;
    int myGrowthRateMin = 20;
    int enemyGrowthRateMax = 30;
    int enemyGrowthRateMin = 20;
    int neutralGrowthRateMax = 30;
    int neutralGrowthRateMin = 20;
    int baseNumShipsDivider = 2;
    int neatDistanceMin = 1;
    int neatDistanceMax = 20;
    
    /**
     * attack mode selecter
     */
    if(pw.NumShips(1) > neatShipNumMin  + rand.nextInt()*(neatShipNumMax-neatShipNumMin) && pw.MyPlanets().size() >= neatPlanetNumMin + rand.nextInt()*(neatPlanetNumMax - neatPlanetNumMax) && pw.Production(1) > neatProductionMin + rand.nextInt()*(neatProductionMax - neatProductionMin))
    	AttackMode = true;
    else
    	AttackMode = false;
    
    
    int counter = 0;
    while(base==null && counter<=myCounterMax){
     counter++;
     for(Planet p : pw.MyPlanets()){
      if(p.NumShips()>= myShipsMin + rand.nextInt() * (myShipsMax - myShipsMin) && p.GrowthRate()>= myGrowthRateMin + rand.nextInt() * (myGrowthRateMax - myGrowthRateMin)){
      	  base = p;
          baseNumShips = base.NumShips()/baseNumShipsDivider;
          System.err.println("**** debugging base full");
      }
     }
    }
    if(base==null)
    {
    	System.err.println("**** debugging base null");
    	for(Planet p : pw.MyPlanets()){
    	  base = p;
          baseNumShips = base.NumShips()/baseNumShipsDivider;
          break;
    	}
    }
    
    if(AttackMode == true){
       counter = 0;
       while(target==null && counter<=enemyCounterMax){
        counter++;
        for(Planet p : pw.EnemyPlanets()){
          	/**
          	 * I have two options, target.numships < basenumships or target.numships < optimized_value
          	 */
            if(p.NumShips()<= enemyShipsMin + rand.nextInt() * (enemyShipsMax - enemyShipsMin) && p.GrowthRate()>= enemyGrowthRateMin + rand.nextInt() * (enemyGrowthRateMax - enemyGrowthRateMin) && pw.Distance(p,base)<=neatDistanceMin + rand.nextInt()*(neatDistanceMax-neatDistanceMin)){
      	      target = p;
          }
        }
       }
    
      if(target == null){
      	counter = 0;
        while(target==null && counter<=neutralCounterMax){
         counter++;
         for(Planet p : pw.NeutralPlanets()){
          	/**
          	 * I have two options, target.numships < basenumships or target.numships < optimized_value
          	 */
            if(p.NumShips()<= neutralShipsMin + rand.nextInt() * (neutralShipsMax - neutralShipsMin) && p.GrowthRate()>= neutralGrowthRateMin + rand.nextInt() * (neutralGrowthRateMax - neutralGrowthRateMin) && pw.Distance(p,base)<=neatDistanceMin + rand.nextInt()*(neatDistanceMax-neatDistanceMin)){
      	      target = p;
            }
         }
        }
      }
    }
    
    if(AttackMode == false){
     counter = 0;
     while(target==null && target!=base && counter<=myCounterMax){
       counter++;
       for(Planet p : pw.MyPlanets()){
         if(p.NumShips()<= myShipsMin + rand.nextInt() * (myShipsMax - myShipsMin) && p.GrowthRate()>= myGrowthRateMin + rand.nextInt() * (myGrowthRateMax - myGrowthRateMin) && pw.Distance(p,base)<=neatDistanceMin + rand.nextInt()*(neatDistanceMax-neatDistanceMin)){
      	  target = p;
         }
       }
     }
    }
    /*************************************************
     * send fleet from our source planet to the destination planet
     */
    if (base != null && target != null)
      pw.IssueOrder(base, target, baseNumShips);
    else
    	return;
  }
  
  public static void main(String[] args) {
    String line = "";
    String message = "";
    int c;
    try {
      while ((c = System.in.read()) >= 0) {
        switch (c) {
          case '\n':
            if (line.equals("go")) {
            PlanetWars pw = new PlanetWars(message);
            DoTurn(pw);
            pw.FinishTurn();
            message = "";
          } else {
            message += line + "\n";
          }
          line = "";
          break;
          default:
            line += (char) c;
            break;
        }
      }
    } catch (Exception e) {
    }
  }
}

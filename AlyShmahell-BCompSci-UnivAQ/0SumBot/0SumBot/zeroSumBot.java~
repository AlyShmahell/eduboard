/**
 * Copyright 2017 Aly Shmahell
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http:#www.apache.org/licenses/LICENSE-2.0 . Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 * 
 * Author: Aly Shmahell
 */

import java.util.*;

public class zeroSumBot {
  
  public static void DoTurn(PlanetWars pw) {
    
    int numFleets = 1;
    boolean attackMode = false;
    
    if (pw.NumShips(1) > pw.NumShips(2)) {
      if (pw.Production(1) > pw.Production(2)) {
        numFleets = 1;
        attackMode = true;
      } else {
        numFleets = 3;
      }
    } else if (pw.Production(1) > pw.Production(2)) {
      numFleets = 1;
    } else {
      numFleets = 5;
    }
    
    if (pw.MyFleets().size() >= numFleets) {
      return;
    }
    
    /**
     * find the strongest ally planet
     */
    Planet strongestAllyPlanet = null;
    double strongestAllyPlanetScore = Double.MIN_VALUE;
    for (Planet p : pw.MyPlanets()) {
      double score = (double) p.NumShips();
      if (score > strongestAllyPlanetScore) {
        strongestAllyPlanetScore = score;
        strongestAllyPlanet = p;
      }
    }
    
    /**
     * find the weakest ally planet
     */
    Planet weakestAllyPlanet = null;
    double weakestAllyPlanetScore = Double.MIN_VALUE;
    for (Planet p : pw.MyPlanets()) {
      double score = 1.0 / (1 + p.NumShips());
      if (score > weakestAllyPlanetScore) {
        weakestAllyPlanetScore = score;
        weakestAllyPlanet = p;
      }
    }
    
    /**
     * find the strongest enemy planet
     */
    Planet strongestEnemyPlanet = null;
    double strongestEnemyPlanetScore = Double.MIN_VALUE;
    for (Planet p : pw.EnemyPlanets()) {
      double score = (double) p.NumShips();
      if (score > strongestEnemyPlanetScore) {
        strongestEnemyPlanetScore = score;
        strongestEnemyPlanet = p;
      }
    }
    
    /**
     * find the weakest enemy planet
     */
    Planet weakestEnemyPlanet = null;
    double weakestEnemyPlanetScore = Double.MIN_VALUE;
    for (Planet p : pw.EnemyPlanets()) {
      double score = 1.0 / (1 + p.NumShips());
      if (score > weakestEnemyPlanetScore) {
        weakestEnemyPlanetScore = score;
        weakestEnemyPlanet = p;
      }
    }
    
        /**
     * find the strongest neutral planet
     */
    Planet strongestNeutralPlanet = null;
    double strongestNeutralPlanetScore = Double.MIN_VALUE;
    for (Planet p : pw.NeutralPlanets()) {
      double score = (double) p.NumShips();
      if (score > strongestNeutralPlanetScore) {
        strongestNeutralPlanettScore = score;
        strongestNeutralPlanet = p;
      }
    }
    
    /**
     * find the weakest neutral planet
     */
    Planet weakestNeutralPlanet = null;
    double weakestNeutralPlanetScore = Double.MIN_VALUE;
    for (Planet p : pw.NeutralPlanets()) {
      double score = 1.0 / (1 + p.NumShips());
      if (score > weakestNeutralPlanetScore) {
        weakestNeutralPlanetScore = score;
        weakestNeutralPlanet = p;
      }
    }
    /**
     * ***********************************************
     */
    
    /**
     * if the strongest enemy planet is capable of destroying out weakest planet,
     * our destination planet becomes our weakest planet
     */
    if (dest != null && needsReinforcement != null) {
      if ((double) StrongestEnemyPlanet.NumShips() / 2 > (double) needsReinforcement.NumShips()) {
        dest = needsReinforcement;
      }
    }
    
    /**
     * send fleet from our source planet to the destination planet
     */
    if (source != null && dest != null) {
      int numShips = source.NumShips() / 2;
      pw.IssueOrder(source, dest, numShips);
    }
  }
  
  public static void main(String[] args) {
    String line = "";
    String message = "";
    int c;
    try {
      while ((c = System.in.read()) >= 0) {
        switch (c) {
          case '\n':
            if (line.equals("go")) {
            PlanetWars pw = new PlanetWars(message);
            DoTurn(pw);
            pw.FinishTurn();
            message = "";
          } else {
            message += line + "\n";
          }
          line = "";
          break;
          default:
            line += (char) c;
            break;
        }
      }
    } catch (Exception e) {
    }
  }
}
